package top.bingoxin.compression;import java.io.*;import java.util.*;import top.bingoxin.huffmantree.*;public class Compression {    /**     * 对文件内容和进行统计     * */    public Map<Character,Integer> fileContent(File file) throws Exception {        //记录每次读取数据的个数        int read = 0;        Map<Character,Integer> map = new HashMap<>();        //打开输入流来读取        InputStream inputStream = new FileInputStream(file);        byte[] data = new byte[1024];        while((read = inputStream.read(data))!= -1){            //将读取内容进行统计            for(int i = 0;i < read;i++){                if(map.containsKey(new Character((char)data[i]))){                    Integer value = map.get(new Character((char)data[i]));                    map.put(new Character((char)data[i]),value + 1);                }else{                    map.put(new Character((char)data[i]),1);                }            }        }        return map;    }    /*    * 根据权值将map升序排序    * **/    public List<Map.Entry<Character,Integer>> sortList(Map<Character,Integer> map){        List<Map.Entry<Character,Integer>> list = new ArrayList<Map.Entry<Character, Integer>>(map.entrySet());        Collections.sort(list, new Comparator<Map.Entry<Character, Integer>>() {            @Override            public int compare(Map.Entry<Character, Integer> o1, Map.Entry<Character, Integer> o2) {                int compare = (o1.getValue()).compareTo(o2.getValue());                return -compare;            }        });        return list;    }    /**     * 根据Huffman编码重写原文件     * */    public void writeFileAgain(String filePath,String fileName,HashMap<Character,String> map, List<Map.Entry<Character,Integer>> list) throws Exception{        InputStream in = new FileInputStream(filePath+fileName);        OutputStream out = new FileOutputStream(filePath + "压缩后文件.txt",true);        //存入原文件相关数据        PrintStream printWriter = new PrintStream(filePath + "压缩后文件.txt");        //写入内容种类数        printWriter.print(map.size() + "\r\n");        //写入内容及其对应的出现次数        int pwConut = list.size();        for(int i = 0;i <pwConut;++i ){            Character pwCharacter = list.get(i).getKey();            printWriter.print(pwCharacter + "," + list.get(i).getValue()+"\r\n");        }        printWriter.flush();        int len = 0;//记录每次读取源文件中数据的大小        byte[] data = new byte[1024];//存放每次读取原文件的内容        ArrayList<Byte> writeData = new ArrayList<>();//存放处理后的数据        int flag = 0;//记录位数的索引        byte tmp = 0;        while((len = in.read(data)) != -1){            //依次解析读取一次的原数据            for(int i = 0;i < len;++i){                //将原文件中的每个数据的Huffman编码转换成字符数组                char[] tmpData = map.get(new Character((char)data[i])).toCharArray();                int tmpLength = tmpData.length;                //将Huffman编码转换成位                for(int j = 0;j < tmpLength;++j){                    tmp <<= 1;                    if(tmpData[j] == '1'){                        tmp |= 1;                    }                    flag++;                    if(flag == 8){                        writeData.add(tmp);                        tmp = (byte)0;                        flag = 0;                    }                }            }            if(flag > 0 && flag < 8){                writeData.add(tmp);            }            //把整理后的数据转换成Byte数组            byte[] wd = new byte[writeData.size()];            System.out.println(writeData);            int wdSize = wd.length;            for(int i = 0;i < wdSize;++i){                wd[i] = writeData.remove(0);            }            out.write(wd);        }        printWriter.close();        in.close();        out.close();    }    public boolean FileCompression(String filePath,String fileName) throws Exception {        File file = new File(filePath + fileName);        //对文件内容进行统计        Map<Character,Integer> map = fileContent(file);        //创建Huffman树        HuffmanTree huffmanTree = new HuffmanTree(map);        List<Map.Entry<Character,Integer>> list = huffmanTree.GetList(map);        //根据Huffman编码重写原文件        writeFileAgain(filePath,fileName,huffmanTree.map,list);        return true;    }}